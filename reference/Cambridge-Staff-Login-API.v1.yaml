openapi: 3.0.0
info:
  title: Cambridge Staff Login API
  version: '1.0'
  contact:
    name: Raphael Ochsenbein
    url: 'https://viu.ch'
    email: ro@viu.ch
  description: The StaffLogin API Provide by ESOL ASSiST.
servers:
  - url: 'https://test-esoldataservice.cambridgeenglish-basel.ch:1443/ESOLDataServices.svc'
    description: TEST_BASEL
  - url: 'https://esoldataservice.cambridgeenglish-basel.ch:3443/ESOLDataServices.svc'
    description: PROD_BASEL
  - url: 'https://test-esoldataservice.cambridgeenglish-basel.ch:1443/ESOLDataServices.svc'
    description: TEST_JURA
  - url: 'https://esoldataservice.cambridgeenglish-basel.ch:3443/ESOLDataServices.svc'
    description: PROD_JURA
  - url: 'https://test.esoldataservice.cambridgeesol-ge.ch:6200/ESOLDataServices.svc'
    description: TEST_GENEVA
  - url: 'https://esoldataservice.cambridgeesol-ge.ch:6100/ESOLDataServices.svc'
    description: PROD_GENEVA
tags:
  - name: API
paths:
  /STValidateLogin:
    get:
      summary: STValidateLogin
      tags:
        - API
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseLogin'
      operationId: get-STValidateLogin
      parameters:
        - schema:
            type: string
          in: query
          name: LoginName
          description: Email address
          required: true
        - schema:
            type: string
          in: query
          name: Password
          description: Password
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
      description: Log an user in.
  /STEmailAvailabilityRecord:
    post:
      summary: STEmailAvailabilityRecord
      operationId: post-STEmailAvailabilityRecord
      tags:
        - API
      parameters:
        - schema:
            type: string
          in: query
          name: UserLoginZ
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
      description: Email a copy of the availabilities. Includes a pdf attached
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneric'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  $ref: '#/components/schemas/Email'
              required:
                - Email
  /STGetOverviewPageInformation:
    get:
      summary: STGetOverviewPageInformation
      tags:
        - API
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOverviewPage'
      operationId: get-STGetOverviewPage
      description: All the information for displaying the generic pages / data to the invigilators.
    parameters:
      - schema:
          type: string
        in: query
        name: UserLoginZ
        required: true
      - schema:
          type: string
          enum:
            - EN
            - DE
            - FR
        in: query
        name: Language
        required: true
      - schema:
          type: string
        in: query
        name: APIKey
        required: true
  /STUpdateAvailability:
    post:
      summary: STUpdateAvailability
      operationId: post-STUpdateAvailability
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneric'
      parameters:
        - schema:
            type: string
          in: query
          name: UserLoginZ
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Availability'
      tags:
        - API
      description: The endpoint where invigilators can update their availability.
  /STClaimExams:
    post:
      summary: STClaimExams
      operationId: post-STClaimExams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneric'
      parameters:
        - schema:
            type: string
          in: query
          name: UserLoginZ
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ClaimExam'
      tags:
        - API
      description: 'Locks in the Exam Claims and '
  /STClaimCoordination:
    post:
      summary: STClaimCoordination
      operationId: post-STClaimCoordination
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneric'
      parameters:
        - schema:
            type: string
          in: query
          name: UserLoginZ
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimCoordination'
      tags:
        - API
      description: The endpoint where invigilators can claim the coordination.
  /STUpdatePersonalInformation:
    post:
      summary: STUpdatePersonalInformation
      operationId: post-STUpdatePersonalInformation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneric'
      parameters:
        - schema:
            type: string
          in: query
          name: UserLoginZ
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalInformation'
      tags:
        - API
      description: 'The endpoint, where inviligators can update their personal information.'
  /STEmailOTP:
    post:
      summary: STEmailOTP
      tags:
        - API
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneric'
      operationId: get-STResendPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  $ref: '#/components/schemas/Email'
              required:
                - Email
      parameters:
        - schema:
            type: string
          in: query
          name: LoginName
          description: Email address
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
        - schema:
            type: string
          in: query
          name: OTP
          description: ''
          required: true
      description: 'Send an Email with the password (or a temporary token for a one time login, or a randomly generated password) to the user. '
    parameters: []
  /STUpdatePassword:
    post:
      summary: STUpdatePassword
      tags:
        - API
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneric'
      operationId: get-STEmailAvailabilityRecord
      parameters:
        - schema:
            type: string
          in: query
          name: UserLoginZ
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
      description: Update the password of an user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Password:
                  type: string
                  format: password
                OTP:
                  type: string
              required:
                - Password
                - OTP
  /STRequestOTP:
    get:
      summary: STRequestOTP
      tags:
        - API
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOTP'
      operationId: get-STRequestOTP
      parameters:
        - schema:
            type: string
          in: query
          name: LoginName
          description: Email address
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
      description: Request an OTP for resetting the password.
components:
  schemas:
    ResponseLogin:
      title: ResponseLogin
      type: object
      description: The Response of the Login Call
      x-tags:
        - Responses
      properties:
        Status:
          $ref: '#/components/schemas/StatusCode'
        ErrorText:
          type: string
          description: ErrorText
        Data:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - Status
        - ErrorText
        - Data
    StatusCode:
      type: string
      enum:
        - '200'
        - '201'
        - '400'
        - '500'
      description: |-
        A status code and in case of an error a corresponding error message. The StatusCode may be:
        - 200: OK -> response for successful request
        - 201: OK, -> Created
        - 400: Bad Request -> request cannot be processed due to invalid input parameters
        - 500: Internal Server Error -> unexpected condition was encountered
      title: StatusCode
      x-tags:
        - Models
    PersonalInformation:
      title: PersonalInformation
      type: object
      description: The data returned / set for any given user
      x-tags:
        - Models
      properties:
        FirstName:
          type: string
        LastName:
          type: string
        EMail:
          type: string
          format: email
        Country:
          type: string
          enum:
            - Switzerland
            - France
            - Germany
        City:
          type: string
        PostCode:
          type: string
        MobilePhone:
          type: string
        HomePhone:
          type: string
        WorkPhone:
          type: string
        IBAN:
          type: string
          pattern: '[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{4}[0-9]{7}([a-zA-Z0-9]?){0,16}'
        BIC_SWIFT:
          type: string
        OENr:
          type: string
          description: Only for Function = Speaking Examiner. Read-Only
        BankName:
          type: string
          description: |
            Example: PC Account
        Function:
          type: string
          description: Read Only. Could be Enum.
        WrittenExaminer:
          type: boolean
          description: Read Only
        OralExaminer:
          type: boolean
          description: Read Only
        DateJoined:
          type: string
          description: Read only
        Active:
          type: boolean
          description: Indicates whether the user is active and should be allowed to login
        PasswordResetRequired:
          type: boolean
          description: Indicates whether the user has to reset their password.
        DateOfBirth:
          type: string
        Nationality:
          type: string
          description: ISO 3166 - Alpha 2
        Gender:
          type: string
          enum:
            - Male
            - Female
            - Other
            - Non-Binary
      required:
        - FirstName
        - LastName
        - EMail
        - WrittenExaminer
        - OralExaminer
        - DateJoined
        - Active
        - PasswordResetRequired
    Deployment:
      title: Deployment
      type: object
      x-tags:
        - Models
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        DeploymentDate:
          type: string
        DeploymentDateISO:
          type: string
        Time:
          type: string
          description: 'The start/end timesof the exam. Ex: 09:00 - 12:00, or 14:00 - 16:00'
        Type:
          type: string
          enum:
            - Written
            - Oral
        ExamLevel:
          type: string
        Function:
          type: string
          description: Is this an enum?
        Venue:
          type: string
          description: 'Ex: Basel Room 1'
      required:
        - Id
        - DeploymentDate
        - DeploymentDateISO
        - Time
        - Type
        - ExamLevel
        - Function
        - Venue
    Availability:
      title: Availability
      type: object
      description: 'The availability record, where an examineer can either indicate to be available, or not.'
      x-tags:
        - Models
      properties:
        AvailabilityDate:
          type: string
        AM:
          type: boolean
        PM:
          type: boolean
        Id:
          type: string
          description: 'ID = 0 => New Object'
        AvailabilityDateISO:
          type: string
        Comment:
          type: string
      required:
        - AvailabilityDate
        - AM
        - PM
        - Id
        - AvailabilityDateISO
    ClaimCoordination:
      title: ClaimCoordination
      type: object
      x-tags:
        - Models
      properties:
        Id:
          type: string
          description: id 0 = new
        UserData:
          $ref: '#/components/schemas/ClaimPersonalInfo'
        MiscellaneousClaims:
          type: array
          items:
            $ref: '#/components/schemas/ClaimMisc'
        Comment:
          type: string
        CoordinationMeetingClaims:
          type: array
          items:
            $ref: '#/components/schemas/ClaimCoordinationMeeting'
        Email:
          $ref: '#/components/schemas/Email'
      required:
        - Id
        - UserData
        - MiscellaneousClaims
        - Comment
        - CoordinationMeetingClaims
        - Email
    Certification:
      title: Certification
      type: object
      description: The certification of an examiner
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        ExamLevel:
          type: string
        TrainingDate:
          type: string
        TrainingDateISO:
          type: string
        Active:
          type: boolean
        CoordinationDate:
          type: string
        CoordinationDateISO:
          type: string
      required:
        - Id
        - ExamLevel
        - TrainingDate
        - TrainingDateISO
        - Active
        - CoordinationDate
        - CoordinationDateISO
      x-tags:
        - Models
    ClaimCoordinationMeeting:
      title: ClaimCoordinationMeeting
      type: object
      x-tags:
        - Models
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        CoordinationMeetingDate:
          type: string
        CoordinationMeetingDateISO:
          type: string
        ExamLevel:
          type: string
        ExamName:
          type: string
        Claim:
          type: boolean
        Travel:
          type: number
      required:
        - Id
        - CoordinationMeetingDate
        - CoordinationMeetingDateISO
        - ExamLevel
        - ExamName
        - Claim
        - Travel
    ClaimMisc:
      title: ClaimMisc
      type: object
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        Description:
          type: string
        Amount:
          type: number
      required:
        - Id
        - Description
        - Amount
      x-tags:
        - Models
    ClaimPersonalInfo:
      title: ClaimPersonalInfo
      type: object
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        FirstName:
          type: string
        LastName:
          type: string
        AccountNr:
          type: string
        ClearingNr:
          type: string
        OENr:
          type: string
        BankOrPost:
          type: string
          description: 'Ex: PC Account'
      required:
        - Id
        - FirstName
        - LastName
        - AccountNr
        - ClearingNr
        - OENr
        - BankOrPost
      x-tags:
        - Models
    ClaimDeploymentOral:
      title: ClaimDeploymentOral
      type: object
      x-tags:
        - Models
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        Travel:
          type: number
        ExamName:
          type: string
        ExamLevel:
          type: string
        DeploymentDateISO:
          type: string
        DeploymentDate:
          type: string
        ClaimHours:
          type: number
        Venue:
          type: string
        Function:
          type: string
          description: Could be an enum
        ReserveSE:
          type: boolean
      required:
        - Id
        - Travel
        - ExamName
        - ExamLevel
        - DeploymentDateISO
        - DeploymentDate
        - ClaimHours
        - Venue
        - Function
        - ReserveSE
    ResponseOverviewPage:
      title: ResponseOverviewPage
      type: object
      description: The Response of the Overview Page Call
      x-tags:
        - Responses
      properties:
        Status:
          $ref: '#/components/schemas/StatusCode'
        ErrorText:
          type: string
          description: ErrorText
        Data:
          type: array
          items:
            type: object
            properties:
              Certifications:
                type: array
                items:
                  $ref: '#/components/schemas/Certification'
              CoordinationClaim:
                $ref: '#/components/schemas/ClaimCoordination'
              ExamClaim:
                $ref: '#/components/schemas/ClaimExam'
              Availability:
                $ref: '#/components/schemas/Availability'
              Deployment:
                $ref: '#/components/schemas/Deployment'
              Invigilator:
                $ref: '#/components/schemas/PersonalInformation'
            required:
              - Certifications
              - CoordinationClaim
              - ExamClaim
              - Availability
              - Deployment
              - Invigilator
      required:
        - Status
        - ErrorText
        - Data
    ResponseOTP:
      title: ResponseOTP
      type: object
      description: The Response of the OTP Request
      x-tags:
        - Responses
      properties:
        Status:
          $ref: '#/components/schemas/StatusCode'
        ErrorText:
          type: string
          description: ErrorText
        Data:
          type: string
          description: The OTP to be used.
      required:
        - Status
        - ErrorText
        - Data
    ResponseGeneric:
      title: ResponseGeneric
      type: object
      description: 'The generic reponse used by various API calls (no data, just status). For exemple, sending Emails.'
      x-tags:
        - Responses
      properties:
        Status:
          $ref: '#/components/schemas/StatusCode'
        ErrorText:
          type: string
          description: ErrorText
        Data:
          type: array
          items: {}
      required:
        - Status
        - ErrorText
        - Data
    ClaimExam:
      title: ClaimExam
      type: object
      x-tags:
        - Models
      description: ''
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        UserData:
          $ref: '#/components/schemas/ClaimPersonalInfo'
        MiscellaneousClaims:
          type: array
          items:
            $ref: '#/components/schemas/ClaimMisc'
        Comment:
          type: string
        DeploymentClaims:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ClaimDeploymentOral'
              - $ref: '#/components/schemas/ClaimDeploymentWritten'
        Email:
          $ref: '#/components/schemas/Email'
      required:
        - Id
        - UserData
        - MiscellaneousClaims
        - Comment
        - DeploymentClaims
        - Email
    ClaimDeploymentWritten:
      title: ClaimDeploymentWritten
      type: object
      x-tags:
        - Models
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        Travel:
          type: number
        ExamName:
          type: string
        ExamLevel:
          type: string
        DeploymentDateISO:
          type: string
        DeploymentDate:
          type: string
        Venue:
          type: string
        Function:
          type: string
          description: Could be an enum
        IsClaiming:
          type: boolean
      required:
        - Id
        - Travel
        - ExamName
        - ExamLevel
        - DeploymentDateISO
        - DeploymentDate
        - Venue
        - Function
        - IsClaiming
    User:
      title: User
      type: object
      properties:
        UserLoginZ:
          type: string
        EMail:
          type: string
          format: email
          example: test@example.org
      required:
        - UserLoginZ
        - EMail
    Email:
      title: Email
      type: object
      description: The Email Message to be sent
      properties:
        Body:
          type: string
          description: The HTML Body of the Email
        Subject:
          type: string
        Recipient:
          type: string
          format: email
        CarbonCopy:
          type: string
          format: email
        BlindCarbonCopy:
          type: string
          format: email
      required:
        - Body
        - Subject
        - Recipient
