openapi: 3.0.0
info:
  title: Cambridge Staff Login API
  version: '1.0'
  contact:
    name: Raphael Ochsenbein
    url: 'https://viu.ch'
    email: ro@viu.ch
servers:
  - url: 'https://test-esoldataservice.cambridgeenglish-basel.ch:1443/ESOLDataServices.svc'
    description: TEST_BASEL
  - url: 'https://esoldataservice.cambridgeenglish-basel.ch:3443/ESOLDataServices.svc'
    description: PROD_BASEL
  - url: 'https://test-esoldataservice.cambridgeenglish-basel.ch:1443/ESOLDataServices.svc'
    description: TEST_JURA
  - url: 'https://esoldataservice.cambridgeenglish-basel.ch:3443/ESOLDataServices.svc'
    description: PROD_JURA
  - url: 'https://test.esoldataservice.cambridgeesol-ge.ch:6200/ESOLDataServices.svc'
    description: TEST_GENEVA
  - url: 'https://esoldataservice.cambridgeesol-ge.ch:6100/ESOLDataServices.svc'
    description: PROD_GENEVA
paths:
  /STValidateLogin:
    get:
      summary: STValidateLogin
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseLogin'
      operationId: get-STAFFValidateLogin
      requestBody: {}
      parameters:
        - schema:
            type: string
          in: query
          name: LoginName
          description: Email address
          required: true
        - schema:
            type: string
          in: query
          name: Password
          description: Password
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
    parameters: []
  /STEmailAvailabilityRecord:
    get:
      summary: STEmailAvailabilityRecord
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOverviewPage'
        '':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneric'
      operationId: get-STEmailAvailabilityRecord
      parameters:
        - schema:
            type: string
          in: query
          name: UserLoginZ
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
      requestBody: {}
  /STGetOverviewPageInformation:
    get:
      summary: STGetOverviewPageInformation
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOverviewPage'
      operationId: get-STGetOverviewPage
    parameters:
      - schema:
          type: string
        in: query
        name: UserLoginZ
        required: true
      - schema:
          type: string
          enum:
            - EN
            - DE
            - FR
        in: query
        name: Language
        required: true
      - schema:
          type: string
        in: query
        name: APIKey
        required: true
  /STUpdateAvailability:
    post:
      summary: STUpdateAvailability
      operationId: post-STUpdateAvailability
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneric'
      parameters:
        - schema:
            type: string
          in: query
          name: UserLoginZ
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Availability'
  /STClaimExams:
    post:
      summary: STClaimExams
      operationId: post-STClaimExams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneric'
      parameters:
        - schema:
            type: string
          in: query
          name: UserLoginZ
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ClaimExam'
  /STClaimCoordination:
    post:
      summary: STClaimCoordination
      operationId: post-STClaimCoordination
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneric'
      parameters:
        - schema:
            type: string
          in: query
          name: UserLoginZ
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimCoordination'
  /STUpdatePersonalInformation:
    post:
      summary: STUpdatePersonalInformation
      operationId: post-STUpdatePersonalInformation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneric'
      parameters:
        - schema:
            type: string
          in: query
          name: UserLoginZ
          required: true
        - schema:
            type: string
            enum:
              - EN
              - DE
              - FR
          in: query
          name: Language
          required: true
        - schema:
            type: string
          in: query
          name: APIKey
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalInformation'
components:
  schemas:
    ResponseLogin:
      title: ResponseLogin
      type: object
      description: The Response of the Login Call
      properties:
        Status:
          $ref: '#/components/schemas/StatusCode'
        ErrorText:
          type: string
          description: ErrorText
        Data:
          type: array
          items:
            $ref: '#/components/schemas/PersonalInformation'
      required:
        - Status
        - ErrorText
        - Data
    StatusCode:
      type: string
      enum:
        - '200'
        - '201'
        - '400'
        - '500'
      description: |-
        A status code and in case of an error a corresponding error message. The StatusCode may be:
        - 200: OK -> response for successful request
        - 201: OK, -> Created
        - 400: Bad Request -> request cannot be processed due to invalid input parameters
        - 500: Internal Server Error -> unexpected condition was encountered
      title: StatusCode
    PersonalInformation:
      title: PersonalInformation
      type: object
      description: The data returned / set for any given user
      properties:
        UserLoginZ:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        EMail:
          type: string
          format: email
        Country:
          type: string
          enum:
            - Switzerland
            - France
            - Germany
        City:
          type: string
        PostCode:
          type: string
        MobilePhone:
          type: string
        HomePhone:
          type: string
        WorkPhone:
          type: string
        BankAccountNr:
          type: string
        ClearingNr:
          type: string
        OeNr:
          type: string
        BankOrPost:
          type: string
          description: |
            Example: PC Account
        Function:
          type: string
        WrittenExaminer:
          type: boolean
        OralExaminer:
          type: boolean
      required:
        - UserLoginZ
        - FirstName
        - LastName
        - EMail
        - WrittenExaminer
        - OralExaminer
    Deployment:
      title: Deployment
      type: object
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        DeploymentDate:
          type: string
        DeploymentDateISO:
          type: string
        Time:
          type: string
        Type:
          type: string
          enum:
            - Written
            - Oral
            - Oral+Written
        ExamLevel:
          type: string
        Function:
          type: string
          description: Is this an enum?
      required:
        - Id
        - DeploymentDate
        - DeploymentDateISO
        - Time
        - Type
        - ExamLevel
        - Function
    Availability:
      title: Availability
      type: object
      description: 'The availability record, where an examineer can either indicate to be available, or not.'
      properties:
        AvailabilityDate:
          type: string
        AM:
          type: boolean
        PM:
          type: boolean
        Id:
          type: string
          description: 'ID = 0 => New Object'
        AvailabilityDateISO:
          type: string
      required:
        - AvailabilityDate
        - AM
        - PM
        - Id
        - AvailabilityDateISO
    ClaimExam:
      title: ClaimExam
      type: object
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        UserData:
          $ref: '#/components/schemas/ClaimPersonalInfo'
        MiscellaneousClaims:
          type: array
          items:
            $ref: '#/components/schemas/ClaimMisc'
        Comment:
          type: string
        DeploymentClaims:
          type: array
          items:
            $ref: '#/components/schemas/ClaimDeployment'
      required:
        - Id
        - UserData
        - MiscellaneousClaims
        - Comment
        - DeploymentClaims
    ClaimCoordination:
      title: ClaimCoordination
      type: object
      properties:
        Id:
          type: string
          description: id 0 = new
        UserData:
          $ref: '#/components/schemas/ClaimPersonalInfo'
        MiscellaneousClaims:
          type: array
          items:
            $ref: '#/components/schemas/ClaimMisc'
        Comment:
          type: string
        CoordinationMeetingClaims:
          type: array
          items:
            $ref: '#/components/schemas/ClaimCoordinationMeeting'
      required:
        - Id
        - UserData
        - MiscellaneousClaims
        - Comment
        - CoordinationMeetingClaims
    Certification:
      title: Certification
      type: object
      description: The certification of an examiner
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        ExamLevel:
          type: string
        TrainingDate:
          type: string
        TrainingDateISO:
          type: string
        Active:
          type: boolean
        CoordinationDate:
          type: string
        CoordinationDateISO:
          type: string
      required:
        - Id
        - ExamLevel
        - TrainingDate
        - TrainingDateISO
        - Active
        - CoordinationDate
        - CoordinationDateISO
    ClaimCoordinationMeeting:
      title: ClaimCoordinationMeeting
      type: object
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        CoordinationMeetingDate:
          type: string
        CoordinationMeetingDateISO:
          type: string
        ExamLevel:
          type: string
        ExamName:
          type: string
        Claim:
          type: boolean
        Lunch:
          type: boolean
        Travel:
          type: number
      required:
        - Id
        - CoordinationMeetingDate
        - CoordinationMeetingDateISO
        - ExamLevel
        - ExamName
        - Claim
        - Lunch
        - Travel
    ClaimMisc:
      title: ClaimMisc
      type: object
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        Description:
          type: string
        Amount:
          type: number
      required:
        - Id
        - Description
        - Amount
    ClaimPersonalInfo:
      title: ClaimPersonalInfo
      type: object
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        FirstName:
          type: string
        LastName:
          type: string
        AccountNr:
          type: string
        ClearingNr:
          type: string
        OENr:
          type: string
        BankOrPost:
          type: string
          description: 'Ex: PC Account'
      required:
        - Id
        - FirstName
        - LastName
        - AccountNr
        - ClearingNr
        - OENr
        - BankOrPost
    ClaimDeployment:
      title: ClaimDeployment
      type: object
      properties:
        Id:
          type: string
          description: 'ID = 0 => New Object'
        Travel:
          type: number
        Lunch:
          type: number
        ExamName:
          type: string
        ExamLevel:
          type: string
        DeploymentDateISO:
          type: string
        DeploymentDate:
          type: string
        AM:
          type: number
        PM:
          type: number
      required:
        - Id
        - Travel
        - Lunch
        - ExamName
        - ExamLevel
        - DeploymentDateISO
        - DeploymentDate
        - AM
        - PM
    ResponseOverviewPage:
      title: ResponseOverviewPage
      type: object
      description: The Response of the Overview Page Call
      properties:
        Status:
          $ref: '#/components/schemas/StatusCode'
        ErrorText:
          type: string
          description: ErrorText
        Data:
          type: array
          items:
            type: object
            properties:
              Certifications:
                type: array
                items:
                  $ref: '#/components/schemas/Certification'
              CoordinationClaim:
                $ref: '#/components/schemas/ClaimCoordination'
              ExamClaim:
                $ref: '#/components/schemas/ClaimExam'
              Availability:
                $ref: '#/components/schemas/Availability'
              Deployment:
                $ref: '#/components/schemas/Deployment'
            required:
              - Certifications
              - CoordinationClaim
              - ExamClaim
              - Availability
              - Deployment
      required:
        - Status
        - ErrorText
        - Data
    ResponseGeneric:
      title: ResponseGeneric
      type: object
      description: The Response of the Email Availability Record
      properties:
        Status:
          $ref: '#/components/schemas/StatusCode'
        ErrorText:
          type: string
          description: ErrorText
        Data:
          type: array
          items:
            type: 'null'
      required:
        - Status
        - ErrorText
        - Data
